import {
  __commonJS
} from "./chunk-WNKWOKNR.js";

// node_modules/prismjs/plugins/normalize-whitespace/prism-normalize-whitespace.min.js
var require_prism_normalize_whitespace_min = __commonJS({
  "node_modules/prismjs/plugins/normalize-whitespace/prism-normalize-whitespace.min.js"(exports, module) {
    !function() {
      if ("undefined" != typeof Prism) {
        var e = Object.assign || function(e2, t2) {
          for (var n2 in t2)
            t2.hasOwnProperty(n2) && (e2[n2] = t2[n2]);
          return e2;
        }, t = { "remove-trailing": "boolean", "remove-indent": "boolean", "left-trim": "boolean", "right-trim": "boolean", "break-lines": "number", indent: "number", "remove-initial-line-feed": "boolean", "tabs-to-spaces": "number", "spaces-to-tabs": "number" };
        n.prototype = { setDefaults: function(t2) {
          this.defaults = e(this.defaults, t2);
        }, normalize: function(t2, n2) {
          for (var r2 in n2 = e(this.defaults, n2)) {
            var i = r2.replace(/-(\w)/g, function(e2, t3) {
              return t3.toUpperCase();
            });
            "normalize" !== r2 && "setDefaults" !== i && n2[r2] && this[i] && (t2 = this[i].call(this, t2, n2[r2]));
          }
          return t2;
        }, leftTrim: function(e2) {
          return e2.replace(/^\s+/, "");
        }, rightTrim: function(e2) {
          return e2.replace(/\s+$/, "");
        }, tabsToSpaces: function(e2, t2) {
          return t2 = 0 | t2 || 4, e2.replace(/\t/g, new Array(++t2).join(" "));
        }, spacesToTabs: function(e2, t2) {
          return t2 = 0 | t2 || 4, e2.replace(RegExp(" {" + t2 + "}", "g"), "	");
        }, removeTrailing: function(e2) {
          return e2.replace(/\s*?$/gm, "");
        }, removeInitialLineFeed: function(e2) {
          return e2.replace(/^(?:\r?\n|\r)/, "");
        }, removeIndent: function(e2) {
          var t2 = e2.match(/^[^\S\n\r]*(?=\S)/gm);
          return t2 && t2[0].length ? (t2.sort(function(e3, t3) {
            return e3.length - t3.length;
          }), t2[0].length ? e2.replace(RegExp("^" + t2[0], "gm"), "") : e2) : e2;
        }, indent: function(e2, t2) {
          return e2.replace(/^[^\S\n\r]*(?=\S)/gm, new Array(++t2).join("	") + "$&");
        }, breakLines: function(e2, t2) {
          t2 = true === t2 ? 80 : 0 | t2 || 80;
          for (var n2 = e2.split("\n"), i = 0; i < n2.length; ++i)
            if (!(r(n2[i]) <= t2)) {
              for (var o = n2[i].split(/(\s+)/g), a = 0, l = 0; l < o.length; ++l) {
                var s = r(o[l]);
                (a += s) > t2 && (o[l] = "\n" + o[l], a = s);
              }
              n2[i] = o.join("");
            }
          return n2.join("\n");
        } }, "undefined" != typeof module && module.exports && (module.exports = n), Prism.plugins.NormalizeWhitespace = new n({ "remove-trailing": true, "remove-indent": true, "left-trim": true, "right-trim": true }), Prism.hooks.add("before-sanity-check", function(e2) {
          var n2 = Prism.plugins.NormalizeWhitespace;
          if ((!e2.settings || false !== e2.settings["whitespace-normalization"]) && Prism.util.isActive(e2.element, "whitespace-normalization", true))
            if (e2.element && e2.element.parentNode || !e2.code) {
              var r2 = e2.element.parentNode;
              if (e2.code && r2 && "pre" === r2.nodeName.toLowerCase()) {
                for (var i in null == e2.settings && (e2.settings = {}), t)
                  if (Object.hasOwnProperty.call(t, i)) {
                    var o = t[i];
                    if (r2.hasAttribute("data-" + i))
                      try {
                        var a = JSON.parse(r2.getAttribute("data-" + i) || "true");
                        typeof a === o && (e2.settings[i] = a);
                      } catch (e3) {
                      }
                  }
                for (var l = r2.childNodes, s = "", c = "", u = false, m = 0; m < l.length; ++m) {
                  var f = l[m];
                  f == e2.element ? u = true : "#text" === f.nodeName && (u ? c += f.nodeValue : s += f.nodeValue, r2.removeChild(f), --m);
                }
                if (e2.element.children.length && Prism.plugins.KeepMarkup) {
                  var d = s + e2.element.innerHTML + c;
                  e2.element.innerHTML = n2.normalize(d, e2.settings), e2.code = e2.element.textContent;
                } else
                  e2.code = s + e2.code + c, e2.code = n2.normalize(e2.code, e2.settings);
              }
            } else
              e2.code = n2.normalize(e2.code, e2.settings);
        });
      }
      function n(t2) {
        this.defaults = e({}, t2);
      }
      function r(e2) {
        for (var t2 = 0, n2 = 0; n2 < e2.length; ++n2)
          e2.charCodeAt(n2) == "	".charCodeAt(0) && (t2 += 3);
        return e2.length + t2;
      }
    }();
  }
});
export default require_prism_normalize_whitespace_min();
//# sourceMappingURL=prismjs_plugins_normalize-whitespace_prism-normalize-whitespace__min__js.js.map
